// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateCacheEntryRequest {
    /// Scope and other metadata for the cache entry
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<CacheMetadata>,
    /// An explicit key for a cache entry
    #[prost(string, tag = "2")]
    pub key: ::prost::alloc::string::String,
    /// Hash of the compression tool, runner OS and paths cached
    #[prost(string, tag = "3")]
    pub version: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateCacheEntryResponse {
    #[prost(bool, tag = "1")]
    pub ok: bool,
    /// SAS URL to upload the cache archive
    #[prost(string, tag = "2")]
    pub signed_upload_url: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinalizeCacheEntryUploadRequest {
    /// Scope and other metadata for the cache entry
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<CacheMetadata>,
    /// An explicit key for a cache entry
    #[prost(string, tag = "2")]
    pub key: ::prost::alloc::string::String,
    /// Size of the cache archive in Bytes
    #[prost(int64, tag = "3")]
    pub size_bytes: i64,
    /// Hash of the compression tool, runner OS and paths cached
    #[prost(string, tag = "4")]
    pub version: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinalizeCacheEntryUploadResponse {
    #[prost(bool, tag = "1")]
    pub ok: bool,
    /// Cache entry database ID
    #[prost(int64, tag = "2")]
    pub entry_id: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCacheEntryDownloadUrlRequest {
    /// Scope and other metadata for the cache entry
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<CacheMetadata>,
    /// An explicit key for a cache entry
    #[prost(string, tag = "2")]
    pub key: ::prost::alloc::string::String,
    /// Restore keys used for prefix searching
    #[prost(string, repeated, tag = "3")]
    pub restore_keys: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Hash of the compression tool, runner OS and paths cached
    #[prost(string, tag = "4")]
    pub version: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCacheEntryDownloadUrlResponse {
    #[prost(bool, tag = "1")]
    pub ok: bool,
    /// SAS URL to download the cache archive
    #[prost(string, tag = "2")]
    pub signed_download_url: ::prost::alloc::string::String,
    /// Key or restore key that matches the lookup
    #[prost(string, tag = "3")]
    pub matched_key: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CacheMetadata {
    /// Backend repository id
    #[prost(int64, tag = "1")]
    pub repository_id: i64,
    /// Scopes for the cache entry
    #[prost(message, repeated, tag = "2")]
    pub scope: ::prost::alloc::vec::Vec<CacheScope>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CacheScope {
    /// Determines the scope of the cache entry
    #[prost(string, tag = "1")]
    pub scope: ::prost::alloc::string::String,
    /// None: 0 | Read: 1 | Write: 2 | All: (1|2)
    #[prost(int64, tag = "2")]
    pub permission: i64,
}
/// Generated client implementations.
pub mod cache_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::http::Uri;
    use tonic::codegen::*;
    #[derive(Debug, Clone)]
    pub struct CacheServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl CacheServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> CacheServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> CacheServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<http::Request<tonic::body::BoxBody>>>::Error:
                Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            CacheServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Generates a SAS URL with write permissions to upload a cache archive
        pub async fn create_cache_entry(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateCacheEntryRequest>,
        ) -> std::result::Result<tonic::Response<super::CreateCacheEntryResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/v1.CacheService/CreateCacheEntry");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("v1.CacheService", "CreateCacheEntry"));
            self.inner.unary(req, path, codec).await
        }
        /// Indicate the completion of a cache archive upload. Triggers post-upload processing
        pub async fn finalize_cache_entry_upload(
            &mut self,
            request: impl tonic::IntoRequest<super::FinalizeCacheEntryUploadRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FinalizeCacheEntryUploadResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/v1.CacheService/FinalizeCacheEntryUpload");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "v1.CacheService",
                "FinalizeCacheEntryUpload",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Generates a SAS URL with read permissions to download a cache archive
        pub async fn get_cache_entry_download_url(
            &mut self,
            request: impl tonic::IntoRequest<super::GetCacheEntryDownloadUrlRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetCacheEntryDownloadUrlResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/v1.CacheService/GetCacheEntryDownloadURL");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "v1.CacheService",
                "GetCacheEntryDownloadURL",
            ));
            self.inner.unary(req, path, codec).await
        }
    }
}
